// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: github.com/micro/message-api/proto/message/message.proto

/*
Package go_micro_srv_message is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/message-api/proto/message/message.proto

It has these top-level messages:
*/
package go_micro_srv_message

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import go_micro_api "github.com/micro/micro/api/proto"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = go_micro_api.Response{}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Message service

type MessageService interface {
	Create(ctx context.Context, in *go_micro_api.Request, opts ...client.CallOption) (*go_micro_api.Response, error)
	Delete(ctx context.Context, in *go_micro_api.Request, opts ...client.CallOption) (*go_micro_api.Response, error)
	Update(ctx context.Context, in *go_micro_api.Request, opts ...client.CallOption) (*go_micro_api.Response, error)
	Search(ctx context.Context, in *go_micro_api.Request, opts ...client.CallOption) (*go_micro_api.Response, error)
	Read(ctx context.Context, in *go_micro_api.Request, opts ...client.CallOption) (*go_micro_api.Response, error)
}

type messageService struct {
	c           client.Client
	serviceName string
}

func MessageServiceClient(serviceName string, c client.Client) MessageService {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.message"
	}
	return &messageService{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *messageService) Create(ctx context.Context, in *go_micro_api.Request, opts ...client.CallOption) (*go_micro_api.Response, error) {
	req := c.c.NewRequest(c.serviceName, "Message.Create", in)
	out := new(go_micro_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageService) Delete(ctx context.Context, in *go_micro_api.Request, opts ...client.CallOption) (*go_micro_api.Response, error) {
	req := c.c.NewRequest(c.serviceName, "Message.Delete", in)
	out := new(go_micro_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageService) Update(ctx context.Context, in *go_micro_api.Request, opts ...client.CallOption) (*go_micro_api.Response, error) {
	req := c.c.NewRequest(c.serviceName, "Message.Update", in)
	out := new(go_micro_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageService) Search(ctx context.Context, in *go_micro_api.Request, opts ...client.CallOption) (*go_micro_api.Response, error) {
	req := c.c.NewRequest(c.serviceName, "Message.Search", in)
	out := new(go_micro_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageService) Read(ctx context.Context, in *go_micro_api.Request, opts ...client.CallOption) (*go_micro_api.Response, error) {
	req := c.c.NewRequest(c.serviceName, "Message.Read", in)
	out := new(go_micro_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Message service

type MessageHandler interface {
	Create(context.Context, *go_micro_api.Request, *go_micro_api.Response) error
	Delete(context.Context, *go_micro_api.Request, *go_micro_api.Response) error
	Update(context.Context, *go_micro_api.Request, *go_micro_api.Response) error
	Search(context.Context, *go_micro_api.Request, *go_micro_api.Response) error
	Read(context.Context, *go_micro_api.Request, *go_micro_api.Response) error
}

func RegisterMessageHandler(s server.Server, hdlr MessageHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Message{hdlr}, opts...))
}

type Message struct {
	MessageHandler
}

func (h *Message) Create(ctx context.Context, in *go_micro_api.Request, out *go_micro_api.Response) error {
	return h.MessageHandler.Create(ctx, in, out)
}

func (h *Message) Delete(ctx context.Context, in *go_micro_api.Request, out *go_micro_api.Response) error {
	return h.MessageHandler.Delete(ctx, in, out)
}

func (h *Message) Update(ctx context.Context, in *go_micro_api.Request, out *go_micro_api.Response) error {
	return h.MessageHandler.Update(ctx, in, out)
}

func (h *Message) Search(ctx context.Context, in *go_micro_api.Request, out *go_micro_api.Response) error {
	return h.MessageHandler.Search(ctx, in, out)
}

func (h *Message) Read(ctx context.Context, in *go_micro_api.Request, out *go_micro_api.Response) error {
	return h.MessageHandler.Read(ctx, in, out)
}
