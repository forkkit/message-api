// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/microhq/message-api/proto/message/message.proto

package go_micro_srv_message

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	proto1 "github.com/micro/go-api/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("github.com/microhq/message-api/proto/message/message.proto", fileDescriptor_bad4b42618d70fe4)
}

var fileDescriptor_bad4b42618d70fe4 = []byte{
	// 179 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0x4a, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0xcf, 0xcd, 0x4c, 0x2e, 0xca, 0xcf, 0x28, 0xd4, 0xcf,
	0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0xd5, 0x4d, 0x2c, 0xc8, 0xd4, 0x2f, 0x28, 0xca, 0x2f, 0xc9,
	0x87, 0x89, 0xc0, 0x68, 0x3d, 0xb0, 0xa8, 0x90, 0x48, 0x7a, 0xbe, 0x1e, 0x58, 0x8f, 0x5e, 0x71,
	0x51, 0x99, 0x1e, 0x54, 0x4e, 0x4a, 0x1d, 0xdd, 0x44, 0xfd, 0xf4, 0x7c, 0x24, 0xa3, 0x12, 0x0b,
	0x32, 0x21, 0xda, 0x8d, 0x3e, 0x31, 0x72, 0xb1, 0xfb, 0x42, 0x34, 0x09, 0xe9, 0x72, 0xb1, 0x39,
	0x17, 0xa5, 0x26, 0x96, 0xa4, 0x0a, 0xf1, 0xeb, 0xa5, 0xe7, 0xeb, 0x81, 0x14, 0x05, 0xa5, 0x16,
	0x96, 0xa6, 0x16, 0x97, 0x48, 0x09, 0x20, 0x04, 0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x95, 0x18,
	0x40, 0xca, 0x5d, 0x52, 0x73, 0x52, 0x49, 0x50, 0x1e, 0x5a, 0x90, 0x42, 0x8a, 0xe9, 0xc1, 0xa9,
	0x89, 0x45, 0xc9, 0x19, 0xc4, 0x29, 0xd7, 0xe6, 0x62, 0x09, 0x4a, 0x4d, 0x4c, 0x21, 0x4a, 0x71,
	0x12, 0x1b, 0xd8, 0xef, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x81, 0x96, 0x0e, 0xbb, 0x78,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MessageClient is the client API for Message service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessageClient interface {
	Create(ctx context.Context, in *proto1.Request, opts ...grpc.CallOption) (*proto1.Response, error)
	Delete(ctx context.Context, in *proto1.Request, opts ...grpc.CallOption) (*proto1.Response, error)
	Update(ctx context.Context, in *proto1.Request, opts ...grpc.CallOption) (*proto1.Response, error)
	Search(ctx context.Context, in *proto1.Request, opts ...grpc.CallOption) (*proto1.Response, error)
	Read(ctx context.Context, in *proto1.Request, opts ...grpc.CallOption) (*proto1.Response, error)
}

type messageClient struct {
	cc *grpc.ClientConn
}

func NewMessageClient(cc *grpc.ClientConn) MessageClient {
	return &messageClient{cc}
}

func (c *messageClient) Create(ctx context.Context, in *proto1.Request, opts ...grpc.CallOption) (*proto1.Response, error) {
	out := new(proto1.Response)
	err := c.cc.Invoke(ctx, "/go.micro.srv.message.Message/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) Delete(ctx context.Context, in *proto1.Request, opts ...grpc.CallOption) (*proto1.Response, error) {
	out := new(proto1.Response)
	err := c.cc.Invoke(ctx, "/go.micro.srv.message.Message/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) Update(ctx context.Context, in *proto1.Request, opts ...grpc.CallOption) (*proto1.Response, error) {
	out := new(proto1.Response)
	err := c.cc.Invoke(ctx, "/go.micro.srv.message.Message/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) Search(ctx context.Context, in *proto1.Request, opts ...grpc.CallOption) (*proto1.Response, error) {
	out := new(proto1.Response)
	err := c.cc.Invoke(ctx, "/go.micro.srv.message.Message/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) Read(ctx context.Context, in *proto1.Request, opts ...grpc.CallOption) (*proto1.Response, error) {
	out := new(proto1.Response)
	err := c.cc.Invoke(ctx, "/go.micro.srv.message.Message/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageServer is the server API for Message service.
type MessageServer interface {
	Create(context.Context, *proto1.Request) (*proto1.Response, error)
	Delete(context.Context, *proto1.Request) (*proto1.Response, error)
	Update(context.Context, *proto1.Request) (*proto1.Response, error)
	Search(context.Context, *proto1.Request) (*proto1.Response, error)
	Read(context.Context, *proto1.Request) (*proto1.Response, error)
}

func RegisterMessageServer(s *grpc.Server, srv MessageServer) {
	s.RegisterService(&_Message_serviceDesc, srv)
}

func _Message_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.message.Message/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).Create(ctx, req.(*proto1.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.message.Message/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).Delete(ctx, req.(*proto1.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.message.Message/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).Update(ctx, req.(*proto1.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.message.Message/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).Search(ctx, req.(*proto1.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.message.Message/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).Read(ctx, req.(*proto1.Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Message_serviceDesc = grpc.ServiceDesc{
	ServiceName: "go.micro.srv.message.Message",
	HandlerType: (*MessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Message_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Message_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Message_Update_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Message_Search_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Message_Read_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/microhq/message-api/proto/message/message.proto",
}
