// Code generated by protoc-gen-go.
// source: github.com/micro/message-api/proto/message/message.proto
// DO NOT EDIT!

/*
Package message is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/message-api/proto/message/message.proto

It has these top-level messages:
*/
package message

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import api "github.com/micro/micro/api/proto"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Message service

type MessageClient interface {
	Create(ctx context.Context, in *api.Request, opts ...client.CallOption) (*api.Response, error)
	Delete(ctx context.Context, in *api.Request, opts ...client.CallOption) (*api.Response, error)
	Update(ctx context.Context, in *api.Request, opts ...client.CallOption) (*api.Response, error)
	Search(ctx context.Context, in *api.Request, opts ...client.CallOption) (*api.Response, error)
	Read(ctx context.Context, in *api.Request, opts ...client.CallOption) (*api.Response, error)
}

type messageClient struct {
	c           client.Client
	serviceName string
}

func NewMessageClient(serviceName string, c client.Client) MessageClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "message"
	}
	return &messageClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *messageClient) Create(ctx context.Context, in *api.Request, opts ...client.CallOption) (*api.Response, error) {
	req := c.c.NewRequest(c.serviceName, "Message.Create", in)
	out := new(api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) Delete(ctx context.Context, in *api.Request, opts ...client.CallOption) (*api.Response, error) {
	req := c.c.NewRequest(c.serviceName, "Message.Delete", in)
	out := new(api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) Update(ctx context.Context, in *api.Request, opts ...client.CallOption) (*api.Response, error) {
	req := c.c.NewRequest(c.serviceName, "Message.Update", in)
	out := new(api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) Search(ctx context.Context, in *api.Request, opts ...client.CallOption) (*api.Response, error) {
	req := c.c.NewRequest(c.serviceName, "Message.Search", in)
	out := new(api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) Read(ctx context.Context, in *api.Request, opts ...client.CallOption) (*api.Response, error) {
	req := c.c.NewRequest(c.serviceName, "Message.Read", in)
	out := new(api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Message service

type MessageHandler interface {
	Create(context.Context, *api.Request, *api.Response) error
	Delete(context.Context, *api.Request, *api.Response) error
	Update(context.Context, *api.Request, *api.Response) error
	Search(context.Context, *api.Request, *api.Response) error
	Read(context.Context, *api.Request, *api.Response) error
}

func RegisterMessageHandler(s server.Server, hdlr MessageHandler) {
	s.Handle(s.NewHandler(&Message{hdlr}))
}

type Message struct {
	MessageHandler
}

func (h *Message) Create(ctx context.Context, in *api.Request, out *api.Response) error {
	return h.MessageHandler.Create(ctx, in, out)
}

func (h *Message) Delete(ctx context.Context, in *api.Request, out *api.Response) error {
	return h.MessageHandler.Delete(ctx, in, out)
}

func (h *Message) Update(ctx context.Context, in *api.Request, out *api.Response) error {
	return h.MessageHandler.Update(ctx, in, out)
}

func (h *Message) Search(ctx context.Context, in *api.Request, out *api.Response) error {
	return h.MessageHandler.Search(ctx, in, out)
}

func (h *Message) Read(ctx context.Context, in *api.Request, out *api.Response) error {
	return h.MessageHandler.Read(ctx, in, out)
}

var fileDescriptor0 = []byte{
	// 153 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xb2, 0x48, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0xcf, 0xcd, 0x4c, 0x2e, 0xca, 0xd7, 0xcf, 0x4d, 0x2d,
	0x2e, 0x4e, 0x4c, 0x4f, 0xd5, 0x4d, 0x2c, 0xc8, 0xd4, 0x2f, 0x28, 0xca, 0x2f, 0x81, 0x8b, 0xc0,
	0x68, 0x3d, 0xb0, 0xa8, 0x94, 0x16, 0xa6, 0x4e, 0x30, 0x89, 0xd0, 0x07, 0x64, 0x41, 0xd4, 0x1a,
	0xad, 0x61, 0xe4, 0x62, 0xf7, 0x85, 0xe8, 0x16, 0x92, 0xe7, 0x62, 0x73, 0x2e, 0x4a, 0x4d, 0x2c,
	0x49, 0x15, 0xe2, 0xd0, 0x0b, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x91, 0xe2, 0x04, 0xb2, 0x8a,
	0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x95, 0x18, 0x40, 0x0a, 0x5c, 0x52, 0x73, 0x52, 0xf1, 0x2a, 0x08,
	0x2d, 0x48, 0xc1, 0x6f, 0x42, 0x70, 0x6a, 0x62, 0x51, 0x72, 0x06, 0x2e, 0x05, 0xb2, 0x5c, 0x2c,
	0x41, 0xa9, 0x89, 0x29, 0x38, 0xa4, 0x93, 0xd8, 0xc0, 0xae, 0x36, 0x06, 0x04, 0x00, 0x00, 0xff,
	0xff, 0xc9, 0xc4, 0x15, 0xf6, 0x1d, 0x01, 0x00, 0x00,
}
